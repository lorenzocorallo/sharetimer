/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as T404Import } from './routes/t/404'
import { Route as TTimerIdImport } from './routes/t/$timerId'

// Create Virtual Routes

const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const T404Route = T404Import.update({
  id: '/t/404',
  path: '/t/404',
  getParentRoute: () => rootRoute,
} as any)

const TTimerIdRoute = TTimerIdImport.update({
  id: '/t/$timerId',
  path: '/t/$timerId',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/t/$timerId.lazy').then((d) => d.Route))

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/t/$timerId': {
      id: '/t/$timerId'
      path: '/t/$timerId'
      fullPath: '/t/$timerId'
      preLoaderRoute: typeof TTimerIdImport
      parentRoute: typeof rootRoute
    }
    '/t/404': {
      id: '/t/404'
      path: '/t/404'
      fullPath: '/t/404'
      preLoaderRoute: typeof T404Import
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/t/$timerId': typeof TTimerIdRoute
  '/t/404': typeof T404Route
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/t/$timerId': typeof TTimerIdRoute
  '/t/404': typeof T404Route
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/t/$timerId': typeof TTimerIdRoute
  '/t/404': typeof T404Route
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/t/$timerId' | '/t/404'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/t/$timerId' | '/t/404'
  id: '__root__' | '/' | '/t/$timerId' | '/t/404'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  TTimerIdRoute: typeof TTimerIdRoute
  T404Route: typeof T404Route
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  TTimerIdRoute: TTimerIdRoute,
  T404Route: T404Route,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/t/$timerId",
        "/t/404"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/t/$timerId": {
      "filePath": "t/$timerId.tsx"
    },
    "/t/404": {
      "filePath": "t/404.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
